=======================================================================================
OPEN:

Qt4 audio frontend:
* Add "all" playlist to GUI ("all" playlist = filter_playlist with no match function set)
* Add filter playlists to GUI; matching function shall use wildcards
* Make use of the systray for basic player control and minimizing to tray
* Import/export M3U
* Import/export individual playlists in JSON format
* UIs for editing settings for individual resources (the settings are stored inside the metadata)
* Playlist sorting
* Moving/cutting/copying/pasting playlist entries
* Resource rescan action in UI
  store the URI to be re-scanned in a list, and when the scanner finishes, use this list entry to replace the old playlist entry metadata with the new one
  also mind errors like invalid_uri, resource_not_found etc. in this list's handling
* UI for manual decoder specification for resources (implies a rescan)
* Save/restore playback status when changing backend
* make it possible to insert new items in middle of playlist
* Implement playback history as described in design doc
* Add shuffle

Audio backend:
* sidplay decoder (http://sidplay2.sourceforge.net/)
* implement decoder deletion thread
* Handle I/O failures (for example, SMB share + network cable disconnected)
* audio/mods/MOD/Realms.mod causes DUMB to hang; before trying to fix it in the DUMB code, use this to test hang detection (that is, implement pings in frontend)
* Investigate shared memory for passing audio data to a visualizer (use boost.interprocess for this)
* StSound decoder (for YM music) (http://leonard.oxg.free.fr/)
* timidity decoder (for MIDIs) (http://timidity.sourceforge.net/)
* monkey's audio decoder
* vqf decoder (decoding library not found yet)
* m1/mame decoder
* lazyUSF decoder for Nintendo64 USF files
* wavpack decoder (http://www.wavpack.com/)
* musepack (mpcdec) decoder (http://musepack.net/)
* modplug decoder (http://gnu.ethz.ch/linuks.mine.nu/modplugplay/)
* trueaudio (tta) decoder (http://en.true-audio.com/)
* in_cube or vgmstream decoder for Gamecube audio
* investigate whether or not to write an RF64/BWF decoder
* Windows waveout sink
* Pulseaudio sink
* JACK sink
* HTTP source
* RTSP source
* MMS source
* SHOUTcast source
[* post processing, VST support, UPnP]

Both:
* Support multiple backends (this affects scanner, frontend base, audio frontend, and the resource incompatibility bit in the playlist entries)
* Examine code for undefined cases
* Ability to edit metadata
* extensive testing (esp. fault tolerance)


=======================================================================================
DONE:

* What to do if a file doesn't play because of an error (for instance, file not found)? Mark resource + transition/resource_finished.
  (Note: this does NOT refer to backend crashes)
* introduce a PING to playback backends to detect hung up backends
* support mid-play metadata changes (including title, artist, album, song length, ....)
* Change per-resource looping design: instead of setting the loop count with set_loop_mode for each resource, put a "loop_mode" member into the metadata
  if not present, the global loop mode shall be used; set_loop_mode would then only be used for said global loop mode
* Add resource specific loop support to frontend
* Add global loop support to frontend
* fix bug with deleted playlists:
  1. play song S from playlist P  2. delete playlist P while S is playing  3. wait until s finishes  4. crash due to erroneous transition attempt
* write filter_playlist unit test for checking for correct signal disconnection:
  1. create flat_playlist  2. create filter_playlist  3. add flat to filter playlist  4. delete filter playlist  5. add entry to flat playlist
* introduce a PING to scan backends to detect hung up backends (solved by using a QTimer)
* use nonlinear volume adjustment
* Accelerate metadata scan by spawning the backend only at the beginning & when it crashes
* Configuration UI subsystem for backend modules (decoders, sinks)
* File/directory names are corrupt sometimes when adding them (they have a file:// prefix already sometimes; note, this is a Qt/KDE problem - just compensate for it)
* Director scan code now checks whether or not scanned entries are files (as opposed to directories) and readable; only then their paths are sent to the scanner
* volume control to adplug, gme, ogg vorbis decoders (-> write generic volume control function) - combine this with the resampler if possible, to minimize the amount of intermediate steps
* sampleformat conversion code (16->24 bit, 24->16, 16->32 bit float etc.) - combine this with the resampler if possible, to minimize the amount of intermediate steps
* mono->stereo conversion if source is mono - combine this with the resampler if possible, to minimize the amount of intermediate steps
* handle different sample formats and channel counts in decoders
* Mark crashed/corrupt entries in playlist
* num_ticks == 0 means the resource cannot seek; in that case, let the decoders do a "fake" progress - count upwards in each update() call, and use that counter as return value
  for get_current_position; increment the counter by the num_tick_per_second value (this also fixes the issue below about the timer in the frontend)
* currently, if the current playback doesn't have num_ticks or num_ticks_per_second, an extra QTime is used in the frontend, in short, a progress is calculated in the frontend
  the proper solution would to do this calculation in the backend
* faad decoder
* fix status bar indicators for current time & length; it doesnt work properly with resources of unknown length
  also, the played time should be always visible, even with an unknown length, that is, get_current_position should do something
* Store in/restore from config the currently visible playlist
* Store in/restore from config the overall UI states (like column widths in the playlists)
* dragonsfunk.mod cannot be read by DUMB -> check that other decoders do not wrongly recognize it (mpg123 is particularly tolerant, and "recognizes" a lot of file types which it cannot play)
* allow for disabling the speex resampler at run-time, causing the backend to reinitialize the sink instead
  (pro: less CPU usage, potentially better sound quality  con: gapless playback only guaranteed if playback frequency does not change)
* include speex resampler in extern/
* include libmagic (with magicfile fixes for audio/mpeg mime type)   - removed libmagic instead; manually recreated relevant libmagic checks
* change crash behavior to mark the existing one as broken + immediately move to the next resource (instead of retrying to play the existing one N times)
* uade decoder (only for file:// URIs!)
* Removing a playlist while the metadata scanner is adding entries to it causes a crash; solution: let the scanner listen for playlist removed signal emissions
* Add error reporting to scanner_base + support it in scan dialog
* Implement scan dialog and add it to the scan indicator icon's "show dialog" action
* Right clicks shall show a context menu containing a "Cancel" and a "Show scanner dialog" item
* Allow for canceling scans through the scan indicator icon's context menu
* Do not hide the scan indicator icon; disable it instead
* Give the scan indicator icon a tooltip showing the current status
* Log dialog close button should be handled better
* Change all boost lambda binds to boost phoenix binds
* Make settings dialog non-modal (necessary for the WebKit inspector dialog to work)
* add unrecognized_resource event & exception
* removing many items that succeed the currently playing one causes many unnecessary set_next_resource command calls
* fix FLAC assert.h problem in configure step (-> do not add the FLAC directory to include paths, only the FLAC++ one)
  possible solutions: (1) remove the FLAC include path from the config environment  (2) isolate the FLAC decoder further, to avoid FLAC <-> boost collisions
  [solved by letting go of the pkg-config package and manually finding flac++ headers/lib instead]
* change common_sink_base behavior: when the number of actually read samples < number requested samples, it shall NOT immediately move to the next decoder; only do that when 0 is returned
  (this is necessary for decoders like the vorbis one, since they may only give partial amounts sometimes, for example because the decoder's frequency suddenly changes)
* game music emulator decoder
* ogg vorbis decoder
* adplug decoder
* flac decoder
* Add libbinio to extern/ folder & build it with waf
* Add code for scanning folders in background
* Removing items -> return their IDs to the unique_ids instance
* Restart playback backend if it crashes
* Display playback status in status bar
* Save/restore playlists
* Renaming and erasing of playlists
* Write custom sliders that allow for an instant jump to where the user clicked (instead of the "paged" jump style the default QSliders have)


=======================================================================================
NOTE: per-resource configuration

As stated in the TODO list, the settings shall be stored in the resource's metadata (not in the URI options). For this, a new command must be introduced:
update_metadata <uri> <new_metadata>

this transmits the new metadata over to the backend.

Why not in the URI options? Because otherwise the resource would have to be re-inserted in the playlist, and settings do not belong inside the URI; the URI identifies the resource
*location*.

With the update_metadata command, the following issues can be resolved:
- per-resource configuration UI
- decoder switching (store the decoder ID in the metadata)
- metadata editing
- per-resource loops

Note that the metadata passed in update_metadata can be partial. The fields that are not mentioned in there will not be touched. For example,
if an URI's metadata has the entries "title" and "length", and the metadata given to update_metadata contains only "title", then "length" will not be deleted.

-> DONE


=======================================================================================
BUG: resource_* signals cause crashes

This happens rarely. It is unknown why as of yet - signals2 uses shared_ptr, in which the crash originates. Observed using boost 1.40 - perhaps fixed in newer versions.

FIXED: the cause was incorrect use of signals2 connection - in filter_playlist, they did not get disconnected
Solution: disconnecting connections explicitely


=======================================================================================
BUG: transitional deadlock in backend

1. set_next_decoder called, backend issues a decoder_mutex lock, common_sink_base issues a mutex lock
2. while step 1 is running, sink calls resource_finished
3. resource_finished tries to lock decoder_mutex, but since the sink loop locked the sink mutex, the code stops at this point

=> Conclusion: extremely short songs (< ~1s) cause race conditions in backend and common_sink_base

Reproduce with gamesmusic/tfmx/ contents and "race_conditions_commands" file. Disable the libmagic call in mpg123_decoder.cpp first, so mpg123 actually tries to
play the TFMX files.

SOLUTION: remove the mutex in common_sink_base; instead, supply the sink with a reference (!) to the backend's decoder_mutex. This implies that a lot of
unnecessary locks must be removed. Therefore, do this fix only when everything else is running ok, since it is quite invasive, and regressions WILL happen.

