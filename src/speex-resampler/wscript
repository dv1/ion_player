#!/usr/bin/env python

import Options, Environment, Utils, os


def set_options(opt):
	opt.add_option('--use-fixed-point', action='store_true', default=False, help='use fixed point instead of floating point for resampling and conversions')


def configure(conf):
	sse_test_fragment = """
#include <xmmintrin.h>
__m128 testfunc(float *a, float *b) { return _mm_add_ps(_mm_loadu_ps(a), _mm_loadu_ps(b)); }

int main() {
	float a = 1.0f, b = 2.0f;
	testfunc(&a, &b);
	return 0;
}
"""

	defines = {}
	defines['SPEEX_RANDOM_PREFIX'] = 'ion_audio_sink'
	defines['EXPORT'] = '__attribute__((visibility("default")))'
	defines['OUTSIDE_SPEEX'] = '1'

	if conf.check_cc(header_name = 'alloca.h'):
		defines['USE_ALLOCA'] = '1'
	if Options.options.use_fixed_point:
		defines['FIXED_POINT'] = '1'
	else:
		defines['FLOATING_POINT'] = '1'
		# SSE only makes sense with floating point
		if conf.check(fragment = sse_test_fragment, execute = 0, define_ret = 0, msg = 'Checking for SSE support', okmsg = 'yes', errmsg = 'no'):
			defines['_USE_SSE'] = '1'

	for variant_name in conf.env['BUILD_VARIANTS']:
		# Writing custom config file for speex
		# write_config_header() doesnt seem to be designed for creating separate, isolated config files
		config_filename = os.sep.join([conf.blddir,variant_name,Utils.diff_path(conf.srcdir,conf.curdir),"config.h"])
		config_filename = os.path.normpath(config_filename)		
		(dir,base) = os.path.split(config_filename)
		try:
			os.makedirs(dir)
		except:
			pass
		config_file = open(config_filename,'w')
		config_file.write("#ifndef SPEEX_AUTOGENERATED_CONFIG_H\n")
		config_file.write("#define SPEEX_AUTOGENERATED_CONFIG_H\n")
		for define_key in defines:
			define_value = defines[define_key]
			if define_value:
				config_file.write("#define %s %s\n" % (define_key, define_value))
			else:
				config_file.write("/*#undef %s*/\n" % define_key)
		config_file.write("#endif\n")
		config_file.close()


def build(bld):
	obj = bld(
		features = ['cc', 'cxx', 'cstaticlib'],
		includes = '. speex',
		export_incdirs = '.',
		uselib = 'BUILDMODE',
		uselib_local = 'ion_audio_common',
		defines = 'HAVE_CONFIG_H',
		target = 'speex_resampler',
		name = 'speex_resampler',
	)
	obj.find_sources_in_dirs('.')

